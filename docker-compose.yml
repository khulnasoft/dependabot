# Definition for running deployed version of khulnasoft using docker-compose
# In case of using custom docker-compose.yml, it needs to be mounted inside 'worker' service
#   with path exposed via 'SETTINGS__UPDATER_TEMPLATE_PATH' envronment variables

# KhulnaSoft base image
x-base-image: &base_image "${BASE_IMAGE:-andrcuns/khulnasoft:3.19.0-alpha.1}"

# Option documentation
# https://github.com/khulnasoft/dependabot/-/blob/master/doc/environment.md
x-environment: &environment_variables
  BASE_IMAGE: *base_image
  # Ecosystem specific image pattern, where package_ecosystem is one of the supported ecosystems:
  #  bundler
  #  npm
  #  gomod
  #  pip
  #  docker
  #  composer
  #  pub
  #  cargo
  #  nuget
  #  maven
  #  gradle
  #  mix
  #  terraform
  #  elm
  #  gitsubmodule
  #
  SETTINGS__UPDATER_IMAGE_PATTERN: "${UPDATER_IMAGE_PATTERN:-andrcuns/khulnasoft-%<package_ecosystem>s:3.19.0-alpha.1}"
  # Persistance
  REDIS_URL: redis://redis:6379
  MONGODB_URL: mongodb:27017
  # Rails
  RAILS_ENV: production
  # https://khulnasoft.github.io/dependabot/config/environment.html#concurrency
  RAILS_MAX_THREADS:
  RAILS_MIN_THREADS:
  # https://khulnasoft.github.io/dependabot/config/environment.html#application
  SECRET_KEY_BASE: ${SECRET_KEY_BASE:-key}
  SETTINGS__LOG_COLOR:
  SETTINGS__LOG_LEVEL:
  SETTINGS__COMMANDS_PREFIX:
  SETTINGS__ANONYMOUS_ACCESS:
  # https://khulnasoft.github.io/dependabot/config/environment.html#access
  SETTINGS__GITHUB_ACCESS_TOKEN:
  SETTINGS__GITHUB_ACCESS_TOKEN:
  SETTINGS__GITHUB_URL:
  # https://khulnasoft.github.io/dependabot/config/environment.html#github-api
  SETTINGS__GITHUB_API_MAX_RETRY:
  SETTINGS__GITHUB_API_MAX_RETRY_INTERVAL:
  # https://khulnasoft.github.io/dependabot/config/environment.html#webhooks
  SETTINGS__DEPENDABOT_URL:
  SETTINGS__CREATE_PROJECT_HOOK:
  SETTINGS__GITHUB_AUTH_TOKEN:
  # https://khulnasoft.github.io/dependabot/config/environment.html#configuration-file
  SETTINGS__CONFIG_BASE_FILENAME:
  SETTINGS__CONFIG_FILENAME:
  SETTINGS__CONFIG_BRANCH:
  # https://khulnasoft.github.io/dependabot/config/environment.html#service
  SETTINGS__DEPLOY_MODE: compose
  SETTINGS__UPDATE_RETRY:
  SETTINGS__EXPIRE_RUN_DATA:
  SETTINGS__DELETE_UPDATER_CONTAINER:
  SETTINGS__UPDATER_CONTAINER_STARTUP_TIMEOUT:
  # https://khulnasoft.github.io/dependabot/config/environment.html#project-registration
  SETTINGS__PROJECT_REGISTRATION:
  SETTINGS__PROJECT_REGISTRATION_CRON:
  SETTINGS__PROJECT_REGISTRATION_ALLOW_PATTERN:
  SETTINGS__PROJECT_REGISTRATION_IGNORE_PATTERN:
  SETTINGS__PROJECT_REGISTRATION_RUN_ON_BOOT:
  # https://khulnasoft.github.io/dependabot/config/environment.html#metrics
  SETTINGS__METRICS:
  # https://khulnasoft.github.io/dependabot/config/environment.html#sentry
  SENTRY_DSN:
  SETTINGS__SENTRY_TRACES_SAMPLE_RATE:
  SETTINGS__SENTRY_PROFILES_SAMPLE_RATE:
  SETTINGS__SENTRY_IGNORED_ERRORS:

# Updater container definition, app dynamically loads this definition when scheduling dependency updater containers
# If custom volumes or variables are required for dependency update process, it should be placed here.
# Be aware that any volumes are in the context of the docker (dind) service, if you want to mount local directories,
# they should be mounted in the dind service first. The local directory in the updater volume should then
# reference the path inside the dind service.
x-updater:
  network_mode: "host"
  environment:
    <<: *environment_variables

services:
  redis:
    image: ${REDIS_IMAGE:-bitnami/redis:7.2.4-debian-11-r19}
    volumes:
      - redis-data:/bitnami/redis/data
    environment:
      ALLOW_EMPTY_PASSWORD: ${REDIS_ALLOW_EMPTY_PASSWORD:-yes}
      REDIS_EXTRA_FLAGS: ${REDIS_EXTRA_FLAGS:-}

  mongodb:
    image: ${MONGODB_IMAGE:-bitnami/mongodb:7.0.5-debian-11-r4}
    volumes:
      - mongodb-data:/bitnami/mongodb
    environment:
      ALLOW_EMPTY_PASSWORD: ${MONGODB_ALLOW_EMPTY_PASSWORD:-yes}
      MONGODB_EXTRA_FLAGS: ${MONGODB_EXTRA_FLAGS:-}

  docker:
    image: ${DOCKER_DIND_IMAGE:-docker:27.1-dind}
    privileged: true
    environment:
      DOCKER_TLS_CERTDIR: "/certs"
    volumes:
      - docker-images:/var/lib/docker
      - docker-certs-ca:/certs/ca
      - docker-certs-client:/certs/client

  migration:
    image: *base_image
    depends_on:
      - mongodb
    volumes:
      - cache:/home/dependabot/app/tmp/cache
    environment:
      <<: *environment_variables
    command: rails db:migrate

  web:
    image: *base_image
    depends_on:
      - redis
      - migration
    volumes:
      - cache:/home/dependabot/app/tmp/cache
    environment:
      <<: *environment_variables
      RAILS_SERVE_STATIC_FILES: "true"
    ports:
      - 3000:3000
    command: rails server
    healthcheck:
      test: ["CMD", "curl", "-f", "localhost:3000/healthcheck"]
      interval: 10s
      timeout: 2s
      retries: 18
      start_period: 5s

  worker:
    image: *base_image
    depends_on:
      - redis
      - migration
    volumes:
      - cache:/home/dependabot/app/tmp/cache
      - docker-certs-client:/certs/client:ro
    environment:
      <<: *environment_variables
      DOCKER_HOST: tcp://docker:2376
      DOCKER_CERT_PATH: "/certs/client"
      DOCKER_TLS_VERIFY: 1
      SETTINGS__UPDATER_TEMPLATE_PATH: ${UPDATER_TEMPLATE_PATH:-docker-compose.yml}
      SETTINGS__SIDEKIQ_ALIVE_KEY_TTL:
    command: sidekiq
    healthcheck:
      test: ["CMD", "curl", "-f", "localhost:7433/healthcheck"]
      interval: 10s
      timeout: 2s
      retries: 18
      start_period: 5s

  background-tasks:
    image: *base_image
    depends_on:
      - web
      - worker
    volumes:
      - cache:/home/dependabot/app/tmp/cache
    environment:
      <<: *environment_variables
    command: rails background_tasks:run_post_deploy_tasks

volumes:
  redis-data:
  mongodb-data:
  cache:
  docker-images:
  docker-certs-ca:
  docker-certs-client:
